'use strict';

import tools from '../tools';
import DataManager from '../../../../DataManager';
import customTypes from '../../customTypes';

import PROPERTY_TYPES from '../../../../enums/PROPERTY_TYPES';

const TextTypes = [PROPERTY_TYPES.STRING, PROPERTY_TYPES.URL, PROPERTY_TYPES.EMAIL, PROPERTY_TYPES.PASSWORD];

/**
 * @param {object} p
 * @returns {string}
 * @private
 */
const _getPropertySpec = (p) => {
  const suffix = TextTypes.indexOf(p.type) !== -1 ? ' length' : '';
  let propertyDescription = `#${p.description}`;

  if (p.defaultValue) {
    propertyDescription += `; default: ${p.defaultValue}`;
  }

  if (p.limitMin) {
    propertyDescription += `; min${suffix}: ${p.limitMin}`;
  }

  if (p.limitMax) {
    propertyDescription += `; max${suffix}: ${p.limitMax}`;
  }

  return `
  ${propertyDescription}
  ${p.key}: ${p.type}${p.isRequired ? '!' : ''}
`;
};


const _getConnection = (edge) => {
  const description = `# Connection description`;

  return `
type ${tools.getName(edge, 'Connection')} implements Connection {
  nodes: [${edge.startNode.label.toCamelCase()}]
  edges: [${tools.getName(edge, 'Edge')}]
  pageInfo: PageInfo
  totalCount: Int!
}`;
};

const _getNodeMutation = (n) => {
  const label = n.label.toCamelCase();
  const edges = DataManager.getEdgesForStartNode(n.id);

  const edgesConnections = edges.map((e) => {
    const startNodeLabel = e.startNode.label.toCamelCase();
    const endNodeLabel = e.endNode.label.toCamelCase();
    const schema = `${tools.getName(e, '')}(${startNodeLabel}Id: ID!, ${endNodeLabel}: ID!):${tools.getName(e, 'Connection')}`;

    return `
  add${schema}
  remove${schema}`;
  });

  return `
  create${label}(${label}:${label}Input): ${label}
  update${label}(${label}:${label}Input, id: ID!): ${label}
  delete${label}(id: ID!):${label}
  ${edgesConnections.join('')}`;
};


/**
 *
 * @param edge
 * @returns {string}
 */
const getEdgeSchema = (edge) => {
  const description = `# Edge description`;
  const properties = edge.properties.map(_getPropertySpec).join('');
  const endNodeLabel = edge.endNode.label.toCamelCase();

  return `
  ${description}
type ${tools.getName(edge, 'Edge')} implements Edge {
  node: ${endNodeLabel}
  ${properties}
}`;
};

/**
 *
 * @param node
 * @returns {string}
 */
const getNodeSchema = (node) => {
  const label = node.label.toCamelCase();
  const edges = DataManager.getEdgesForStartNode(node.id);

  const description = `# Node description`;
  const properties = node.properties.map(_getPropertySpec).join('');
  const inputProperties = node.properties.filter((p) => !p.isAutoGenerated).map(_getPropertySpec).join('');

  const connections = edges.map((e) => `
  ${e.label}: ${tools.getName(e, 'Connection')}`).join('');

  const nodeSpec = `
${description}
type ${label} implements Node {
  ${properties}
  ${connections}
}`;

  const nodeInputSpec = `
#input for ${label}
input ${label}Input {
  ${inputProperties}
}`;

  return `${nodeSpec}
${nodeInputSpec}`;
};

/**
 *
 * @returns {string}
 */
const getFullSchema = () => {
  const nodes = DataManager.getAllNodes();
  const edges = DataManager.getAllEdges();

  const nodesSchema = nodes.map(node => getNodeSchema(node)).join('\n');
  const edgesSchema = edges.map(getEdgeSchema).join('\n');
  const nodeMutations = nodes.map(_getNodeMutation).join('\n');
  const connectionsSchema = edges.map(_getConnection).join('\n');

  const schemaEntries = nodes.map((n) => `${n.label}s(id:[ID]): [${n.label.toCamelCase()}]`).join('\n  ');

  return `
${customTypes.schema}
${nodesSchema}
${edgesSchema}
${connectionsSchema}

type Mutation {
  ${nodeMutations}
}

type Query {
  nodes(id:[ID]): [Node]
  ${schemaEntries}
}

schema {
  query: Query
  mutation: Mutation
}`;
};

export default {
  getFullSchema,
  getNodeSchema,
  getEdgeSchema
};
