
import tools from './shared/tools';
import propertySpec from './properties';
import DataManager from '../../DataManager';


const getNodeMutation = (node) => {
  const label = node.label.toCamelCase();
  const edges = DataManager.getEdgesForStartNode(node.id);

  const edgesConnections = edges.map((edge) => {
    const startNodeLabel = edge.startNode.label.toCamelCase();
    const endNodeLabel = edge.endNode.label.toCamelCase();
    const schema = `${tools.getName(edge, '')}(${startNodeLabel}Id: ID!, ${endNodeLabel}: ID!):${tools.getName(edge, 'Connection')}`;

    return `
add${schema}
remove${schema}
`;
  });

  return `
create${label}(${label}:${label}Input): ${label}
update${label}(${label}:${label}Input, id: ID!): ${label}
delete${label}(id: ID!):${label}
${edgesConnections.join('')}
`;
};


/**
 *
 * @param node
 * @returns {string}
 */
const getNodeSchema = (node) => {
  const label = node.label.toCamelCase();
  const edges = DataManager.getEdgesForStartNode(node.id);

  const properties = node.properties.map(propertySpec).join('');
  const inputProperties = node.properties.filter((p) => !p.isAutoGenerated).map(propertySpec).join('');

  const connections = edges.map((e) => `
  ${e.label}: ${tools.getName(e, 'Connection')}`).join('');

  const nodeSpec = `
# Node description
type ${label} implements Node {
  ${properties}
  ${connections}
}
`;

  const nodeInputSpec = `
# Input for ${label}
input ${label}Input {
  ${inputProperties}
}
`;

  return `
${nodeSpec}
${nodeInputSpec}
`;
};

const getNodeResolver = (node) => {
  return ``;
};

export default {
  schema: {
    getNodeSchema,
    getNodeMutation
  },
  resolvers: {
    getNodeResolver
  }
};
